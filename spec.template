# Use macros wherever possible
$source =~ s/$metadata->{version}/%{version}/g;
$source =~ s/$metadata->{name}/%{npmname}/g;
$dir =~ s/$metadata->{version}/%{version}/g;
$dir =~ s/$metadata->{name}/%{npmname}/g;

# Build and runtime dependencies
my @dependencies;
my @orig_dependencies;
foreach my $name (keys %{$metadata->{dependencies}}) {
	my $version = $metadata->{dependencies}{$name};
	$version =~ s/([>=<]+\s*)/$1 /;
        push @orig_dependencies, "# nodejs-$name $version";
	push @dependencies, "BuildRequires:  nodejs-$name";
	@dependencies = sort @dependencies;
}
@dependencies = ('', @dependencies, '') if @dependencies;

# Keep track of runnable scripts (that go into /usr/bin)
my @bininst;
my @binfiles;
for my $bin (map { $_, "$_@%{version}" } keys %{$metadata->{bin}}) {
	push @bininst, "install -p usr/bin/$bin \$RPM_BUILD_ROOT%{_bindir}";
	push @binfiles, "%{_bindir}/$bin";
}
@bininst = ('', 'mkdir -p $RPM_BUILD_ROOT%{_bindir}', @bininst) if @bininst;
@binfiles = (@binfiles, '') if @binfiles;

# Several packages are broken enough to lack this
my $license = $metadata->{license}{type} || $metadata->{license} || $metadata->{licenses}{type} || $metadata->{licenses} || 'FIXME: Tell upstream to fix this';

# Fill in the template
print SPEC <<EOF;
%global npmname $metadata->{name}

%global _use_internal_dependency_generator 0
%global __find_provides /bin/sh -c 'sed -n "s,.*/\\\\.npm/\\\\([^\\\\/]*\\\\)\\\\/\\\\([^/]*\\\\.[^/]*\\\\)/.*,nodejs(\\\\1) = \\\\2,p" |sort |uniq'
%global __find_requires /bin/sh -c 'sed -n "s,.*/dependson/\\\\([^@\\\\/]*\\\\)@\\\\([^@/]\\\\.[^@/]*\\\\)\$,nodejs(\\\\1) = \\\\2,p" |sort |uniq'

Name:           nodejs-%{npmname}
Version:        $metadata->{version}
Release:        1%{?dist}
Summary:        $metadata->{description}

%if 0%{?suse_version}
Group:          Development/Libraries/Other
%else
Group:          Development/Libraries
%endif
License:        $license
URL:            $homepage
Source0:        $source
BuildRoot:      %(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)

EOF
print SPEC join "\n", @orig_dependencies;
print SPEC join "\n", @dependencies;
print SPEC <<EOF;
BuildRequires:  nodejs-npm
Requires:       nodejs-npm
%if 0%{?suse_version} > 1110
BuildRequires:  fdupes
Provides:       npm(%{npmname}) = %{version}
Provides:       npm(%{npmname}@%{version})
%endif

BuildArch:      noarch

%description
$metadata->{description}


%prep
%setup -q -n $dir


%build
%if 0%{?suse_version} == 0
mkdir -p .%{_prefix}/lib/node/.npm
cp -a %{_prefix}/lib/node/.npm/* \\
	.%{_prefix}/lib/node/.npm

npm_config_root=.%{_prefix}/lib/node \\
npm_config_binroot=.%{_bindir} \\
npm_config_manroot=.%{_mandir} \\
npm install %{SOURCE0}
%endif

%install
rm -rf \$RPM_BUILD_ROOT

%if 0%{?suse_version}
mkdir -p %{buildroot}%{_prefix}/lib/node_modules
npm_config_prefix=%{buildroot}%{_prefix} \\
npm_config_binroot=%{buildroot}%{_bindir} \\
npm_config_manroot=%{buildroot}%{_mandir} \\
npm install --global --production %{S:0}
 
rm -rf %{buildroot}%{_prefix}/lib/node_modules/%{npmname}/node_modules
rm -rf %{buildroot}%{_prefix}/lib/node_modules/glob/deps/
rm -rf %{buildroot}%{_prefix}/lib/node_modules/glob/src/
rm -rf %{buildroot}%{_prefix}/lib/node_modules/glob/test/
%else
mkdir -p \$RPM_BUILD_ROOT%{_prefix}/lib/node/.npm/%{npmname}
cp -a \$PWD%{_prefix}/lib/node/%{npmname}{,@%{version}} \\
	\$RPM_BUILD_ROOT%{_prefix}/lib/node
cp -a \$PWD%{_prefix}/lib/node/.npm/%{npmname}/{%{version},active} \\
	\$RPM_BUILD_ROOT%{_prefix}/lib/node/.npm/%{npmname}
%endif
  
%if 0%{?suse_version} > 1110
%fdupes %{buildroot}
%endif

EOF

print SPEC <<EOF;


%clean
rm -rf \$RPM_BUILD_ROOT


%files
%defattr(-,root,root,-)
%if 0%{?suse_version}
%{_prefix}/lib/node_modules
%{_prefix}/lib/node_modules/%{npmname}
%else
%{_prefix}/lib/node/%{npmname}
%{_prefix}/lib/node/%{npmname}@%{version}
%{_prefix}/lib/node/.npm/%{npmname}
%endif
EOF
print SPEC "%{_bindir}/*" if @binfiles;

close SPEC;
